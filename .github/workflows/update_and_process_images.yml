name: Optimize and Process Images

on:
  pull_request:
    paths:
      - 'images/**/*.gif'
      - 'images/**/*.webp'
      - 'images/**/*.png'
      - 'images/**/*.jpg'
      - 'images/**/*.jpeg'

env:
  IMAGE_DIR: 'images'

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: optipng imagemagick
        version: 1.0

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: ${{ env.IMAGE_DIR }}/**/*.{gif,webp,png,jpg,jpeg}

    - name: Process changed images
      run: |
        import os
        import sys
        import subprocess
        from PIL import Image

        def process_image(input_path):
            try:
                # Prepare the output filename
                output_path = os.path.splitext(input_path)[0] + '.png'
                temp_path = output_path + '.temp.png'

                # Convert to PNG using ImageMagick (lossless)
                subprocess.run(['convert', input_path, '-colorspace', 'RGB', 'PNG32:' + temp_path], check=True)

                # Open the converted image with Pillow
                with Image.open(temp_path) as img:
                    # Get the bounding box of the non-zero regions in the image
                    bbox = img.getbbox()
                    
                    if bbox:
                        # Crop to the bounding box
                        cropped = img.crop(bbox)
                        
                        # Calculate the size of the smallest square that fits the content
                        size = max(cropped.width, cropped.height)
                        
                        # Create a new square image with transparent background
                        square_img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
                        
                        # Calculate position to paste the cropped image
                        paste_pos = ((size - cropped.width) // 2, (size - cropped.height) // 2)
                        
                        # Paste the cropped image onto the square background
                        square_img.paste(cropped, paste_pos)
                    else:
                        # If there's no content (fully transparent image), just use the original
                        square_img = img.copy()

                    # Save as PNG
                    square_img.save(output_path, 'PNG')

                # Remove the temporary file
                os.remove(temp_path)

                # Optimize with optipng
                subprocess.run(['optipng', '-o2', '-quiet', output_path], check=True)

                # Remove the original file if it's different from the output
                if input_path != output_path:
                    os.remove(input_path)

                print(f"Successfully processed: {input_path} -> {output_path}")
                return True

            except Exception as e:
                print(f"Error processing {input_path}: {str(e)}")
                return False

        def main(file_list):
            success = True
            for file_path in file_list:
                if not process_image(file_path):
                    success = False
            return success

        if __name__ == "__main__":
            changed_files = r"""${{ steps.changed-files.outputs.all_changed_files }}""".split()
            if changed_files:
                if main(changed_files):
                    sys.exit(0)
                else:
                    sys.exit(1)
            else:
                print("No image files to process.")
      shell: python

    - name: Commit and push changes
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || (git commit -m "Optimize and process images" && 
          git push origin HEAD:${{ github.head_ref }})
