name: Optimize and Process Images

on:
  pull_request:
    paths:
      - 'images/**/*.gif'
      - 'images/**/*.webp'
      - 'images/**/*.png'
      - 'images/**/*.jpg'
      - 'images/**/*.jpeg'

env:
  IMAGE_DIR: 'images'

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y optipng
        python -m pip install --upgrade pip
        pip install Pillow pillow-avif

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: ${{ env.IMAGE_DIR }}/**/*.{gif,webp,png,jpg,jpeg,avif}

    - name: Process changed images
      run: |
        import os
        import sys
        import subprocess
        from PIL import Image
        import pillow_avif

        def process_image(input_path):
            try:
                # Open the image
                with Image.open(input_path) as img:
                    # Convert to RGBA if it's not already
                    img = img.convert('RGBA')

                    # Calculate the size for a square image
                    max_size = max(img.size)
                    
                    # Create a transparent square background
                    square_img = Image.new('RGBA', (max_size, max_size), (0, 0, 0, 0))
                    
                    # Paste the original image onto the square background
                    paste_pos = ((max_size - img.size[0]) // 2, (max_size - img.size[1]) // 2)
                    square_img.paste(img, paste_pos, img)

                    # Prepare the output filename
                    output_path = os.path.splitext(input_path)[0] + '.png'

                    # Save as PNG
                    square_img.save(output_path, 'PNG')

                # Optimize with optipng
                subprocess.run(['optipng', '-o2', '-quiet', output_path], check=True)

                # Remove the original file if it's different from the output
                if input_path != output_path:
                    os.remove(input_path)

                print(f"Successfully processed: {input_path} -> {output_path}")
                return True

            except Exception as e:
                print(f"Error processing {input_path}: {str(e)}")
                return False

        def main(file_list):
            success = True
            for file_path in file_list:
                if not process_image(file_path):
                    success = False
            return success

        if __name__ == "__main__":
            changed_files = r"""${{ steps.changed-files.outputs.all_changed_files }}""".split()
            if changed_files:
                if main(changed_files):
                    sys.exit(0)
                else:
                    sys.exit(1)
            else:
                print("No image files to process.")
      shell: python

    - name: Commit and push changes
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || (git commit -m "Optimize and process images" && 
          git push origin HEAD:${{ github.head_ref }})

    - name: Upload error log
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: processing-errors
        path: ${{ github.workspace }}/*.log
